#include<stdio.h>
#include <stdint.h>

/*エンディアンとは、コンピュータのメモリのような
1次元空間に複数の連続した対象を配列する方法を意味する。
その中のバイトを配列する方法をバイト順とする。
リトルエンディアンは、メモリ開始アドレスが下位バイトから
上位バイト方向に記録されているバイトオーダー方式で
ビッグエンディアンは、メモリ開始アドレスが上位バイトから
下位バイトの方向に記録されているバイトオーダー方式である。
*/

int is_littel_endian()
{
	int a = 0x12345678;
	int b = 0x12345678;
	int c = 0x12345678;
	int d = 0x12345678;

	printf("%x %x\n",((char*)&a),*((char*)&a));
	printf("%x %x\n",((char*)&a+1),*((char*)&a+1));
	printf("%x %x\n",((char*)&a+2),*((char*)&a+2));
	printf("%x %x\n",((char*)&a+3),*((char*)&a+3));

	printf("%x %x\n", ((char*)& b), *((char*)& b));
	printf("%x %x\n", ((char*)& b + 1), *((char*)& b + 1));
	printf("%x %x\n", ((char*)& b + 2), *((char*)& b + 2));
	printf("%x %x\n", ((char*)& b + 3), *((char*)& b + 3));

	printf("%x %x\n", ((char*)& c), *((char*)& c));
	printf("%x %x\n", ((char*)& c + 1), *((char*)& c + 1));
	printf("%x %x\n", ((char*)& c + 2), *((char*)& c + 2));
	printf("%x %x\n", ((char*)& c + 3), *((char*)& c + 3));

	printf("%x %x\n", ((char*)& d), *((char*)& d));
	printf("%x %x\n", ((char*)& d + 1), *((char*)& d + 1));
	printf("%x %x\n", ((char*)& d + 2), *((char*)& d + 2));
	printf("%x %x\n", ((char*)& d + 3), *((char*)& d + 3));

	if ( *((char*)&a) == 0x78) 
	{
		return 1;// リトルエンディアン
	}
	return 0; //ビックエンディアン
}
void main()
{
	int res = is_littel_endian();
	if (res == 1)
	{
		printf("littel endian \n");
	}
	else
		printf("big endian \n");
}

/*
リトルエンディアンの基準に説明すると、
0x01234567という数字に先頭に大きな桁数「01」が高いアドレスに
低い桁「67」が低いアドレスに格納されている。
ビッグエンディアンは、その反対だ。
*/


/*


int main(int argc, char** argv)
{
	union
	{
		uint32_t b4;     4byte   
		uint16_t b2[2]; 2byte×2 
		uint8_t b1[4];  1byte×4 
	} bytes;

	bytes.b4 = 0x12345678;
	printf("bytes.b4: %08X\n", bytes.b4);
	printf("bytes.b2: %04X, %04X\n", bytes.b2[0], bytes.b2[1]);
	printf("bytes.b1: %02X, %02X, %02X, %02X\n", bytes.b1[0], bytes.b1[1], bytes.b1[2], bytes.b1[3]);
	return 0;
}
*/

/*

長点短点
ビッグエンディアンは、ソフトウェアのデバッグを楽にしてくれる
傾向がある。人が数字を読み書きする方法と同じであるため、
デバッグの過程でメモリの値を表示する楽なのに、例えば0x12345678は、
ビッグエンディアンで12345678で表現される。

逆にリトルエンディアンは、メモリに格納された値の下位バイトだけ使用する場合は、
別の計算が必要ないという利点がある。たとえば、32ビットの数値である0x12はリトルエンディアンで表現すると56 00 00 00がされるが、
この表現で前の二バイトまたはバイトのみ取り外せば下位16ビットまたは8ビットを直接得ることができる。一方、32ビットのビッグエンディアン環境では、
下位16ビットまたは8ビットの値を取得するためには、変数のアドレスに2バイトまたは3バイトをよりしなければならない。
普通の変数の最初のバイトを、その変数のアドレスとすることのために、このような性質は、多くの場合、プログラミングを楽にするのに対し、
リトルエンディアン環境のプログラマがビッグエンディアンの環境で、多くの場合、間違いを引き起こす理由でもある。

*/